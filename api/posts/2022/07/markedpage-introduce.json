{"metadata":{"title":"MarkedPage — SvelteKit 靜態網站的內容管理方案","tags":["svelte","markdown","programing"],"excerpt":"想試著做個靜態網站卻又對現成的生成器感到不滿意？不妨試試看 SvelteKit 與這個專門為靜態網站而生的 Markdown 內容索引工具吧，相信能夠帶來些不一樣的使用體驗。","created":"2022-07-22T00:00:00.000Z"},"content":"<p>午安旅人，MarkedPage 是搭建這個部落格時一起製作的工具包，用意在解決 SvelteKit 使用 Markdown 及建立索引時缺乏相關工具的問題，希望能帶給你不錯的體驗。</p>\n<h2 id=\"這能夠做些什麼？\" class=\"heading-item\">這能夠做些什麼？</h2><ul>\n<li>使用 .md 檔案作為資料來源，不需要額外的內容管理系統(CMS)。</li>\n<li>內建 <code>FrontMatter</code>、<code>&lt;!--more--&gt; 標籤</code>、<code>headings 抽取</code> 功能。</li>\n<li>內置<a href=\"#classifier\" >簡易分類器</a>，可依據 <strong>資料夾路徑</strong> 或是 <strong>FrontMatter 欄位</strong> 進行分類，省去撰寫繁雜的分類邏輯。</li>\n<li>支援<a href=\"#customclassifier\" >自定義分類器</a>，依照自己需求客製化分類方式。</li>\n<li>具備 draft (草稿)輔助功能，當一個文章被標記為 draft 時，在 dev 環境將照常顯示可用做畫面預覽，但在正式編譯時將不會被列入清單。</li>\n</ul>\n<h2 id=\"事前準備\" class=\"heading-item\">事前準備</h2><p>Makredpage 雖然可單獨使用，但主要用於配合 SvelteKit 專案。因此以下範例皆以 SvelteKit 的使用情境為主。</p>\n<h3 id=\"安裝\" class=\"heading-item\">安裝</h3><pre><code class=\"language-js\">npm install markedpage\n// yarn add markedpage\n// pnpm install markedpage\n</code></pre>\n<h3 id=\"目錄結構\" class=\"heading-item\">目錄結構</h3><p>創建基本資料夾結構及檔案：</p>\n<pre><code class=\"language-js\">/\n├─ docs\n│   └─ _posts\n│         ├─ 2021-09-16-directorypost1.md\n│         └─ 2021-09-17-note.md\n├─ src\n│    ├─ app.html\n│    └─ site.config.js\n└ package.json\n</code></pre>\n<p>在目錄配置方面，遵循約定大於配置原則。</p>\n<ul>\n<li><p>/docs</p>\n<ul>\n<li>所有 .md 檔案必須放置於此路徑下。</li>\n<li>分類器會以此路徑為基準進行解析。</li>\n<li>檔案名稱支援 yyyy-mm-dd-slug.md 及 slug.md 兩種解析模式</li>\n</ul>\n</li>\n<li><p>/src/site.config.js</p>\n<ul>\n<li>MarkedPage 主要的配置檔案，用於配置 Classifier 及 Marked 擴展。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置-siteconfigjs\" class=\"heading-item\">配置 site.config.js</h3><pre><code class=\"language-js\">const config = {\n    classifier: [\n        { id: &#39;post&#39;, params: { path: &#39;/_posts/&#39; }, type: &#39;directory&#39; },\n    ],\n    marked: {\n        options: {},\n        extensions: []\n    },\n};\n\nexport default config;\n</code></pre>\n<ul>\n<li><code>classifier</code> 欄位型別為 Array 用於配置分類器，每個分類器由三個欄位組成。<ul>\n<li>id\t=&gt;  分類器 id - 型別為 string</li>\n<li>params\t=&gt; 傳入分類器的參數 - 型別為 Object </li>\n<li>type\t=&gt;  選用的分類器類型</li>\n</ul>\n</li>\n</ul>\n<p>關於分類器的詳情可參考 <a href=\"#classifier\" ><strong>#Classifier</strong></a> 節</p>\n<ul>\n<li><code>marked</code> 欄位用於配置 marked  的設定及擴展功能。詳情可參閱 <a href=\"#marked\" ><strong>#Marked</strong></a> 節。</li>\n</ul>\n<p>除以上用途外也可用於配置網站的自定義內容，如： title 、description ...等，可自行運用。範例如下：</p>\n<pre><code class=\"language-js\">const config = {\n    title: &#39;MarkedPage Test Project&#39;,\n    description: &#39;Test project description&#39;,\n    author: {\n        name: &quot;saweima&quot;\n    },\n    classifier: [\n        { id: &#39;post&#39;, params: { path: &#39;/_posts/&#39; }, type: &#39;directory&#39; },\n        { id: &#39;tag&#39;, params: { keys: [&#39;tag&#39;, &#39;tags&#39;] }, type: &#39;frontmatter&#39; },\n        { id: &#39;category&#39;, params: { keys: [&#39;category&#39;, &#39;categories&#39;] }, type: &#39;frontmatter&#39; },\n        { id: &#39;custom&#39;, params: { path: &#39;/_posts/&#39; }, type: CustomClassifierHandle },\n    ],\n    marked: {\n        options: {},\n        extensions: {}\n    },\n};\n</code></pre>\n<h3 id=\"配置-viteconfigjs\" class=\"heading-item\">配置 vite.config.js</h3><pre><code class=\"language-js\">import { sveltekit } from &#39;@sveltejs/kit/vite&#39;;\nimport { markedpageVitePlugin } from &#39;markedpage&#39;;\n\nimport siteConfig from &#39;./src/site.config.js&#39;;\n\n/** @type {import(&#39;vite&#39;).UserConfig} */\nconst config = {\n    plugins: [sveltekit(), markedpageVitePlugin(siteConfig)]\n};\n\nexport default config;\n</code></pre>\n<p>透過導入 <strong>markedpageVitePlugin</strong> 及 <strong>site.config.js</strong> 可支援 markdown 檔案及 site.config.js 的熱更新（檔案更新後不需要重啟，會自動刷新）。</p>\n<h2 id=\"如何使用？\" class=\"heading-item\">如何使用？</h2><p>MarkedPage 提供 3 個主要 Function 及 1 個 HMR 輔助 Hook。</p>\n<ul>\n<li>siteConfig()</li>\n<li>getPage(slug)</li>\n<li>classifiedSet(id)</li>\n<li>onContentUpdate(callback)</li>\n</ul>\n<h3 id=\"siteconfig\" class=\"heading-item\">siteConfig()</h3><p>取得 /src/site.config.js 中的內容。</p>\n<pre><code class=\"language-js\">// 取得 config data\nconst config = await siteConfig();\n\n// 回傳結果\n{\n  title: &#39;MarkedPage Test Project&#39;,\n  classifier: [\n    { id: &#39;post&#39;, params: [Object], type: &#39;directory&#39; },\n    { id: &#39;tag&#39;, params: [Object], type: &#39;frontmatter&#39; },\n    { id: &#39;category&#39;, params: [Object], type: &#39;frontmatter&#39; },\n    {\n      id: &#39;custom&#39;,\n      params: [Object],\n      type: [AsyncFunction: CustomClassifierHandle]\n    }\n  ],\n  marked: { options: {}, extensions: [ [Object] ] }\n}\n</code></pre>\n<h3 id=\"getpageslug\" class=\"heading-item\">getPage(slug)</h3><p>根據 slug 取得對應的頁面資料。</p>\n<pre><code class=\"language-js\">const page = await getPage(&quot;marked-test&quot;);\n\n// 回傳結果\n{\n  frontMatter: {\n    title: &#39;MarkedPage Test Page&#39;,\n    tags: [ &#39;test&#39; ],\n    category: [ &#39;default&#39; ],\n    excerpt: &#39;TestPage Excerpt.&#39;,\n    created: 2022-05-18T00:00:00.000Z\n  },\n  sourcePath: &#39;docs/_posts/2022-05-18-marked-test.md&#39;,\n  indexPath: &#39;docs/_posts/2022-05-18-marked-test&#39;,\n  headings: [\n    { depth: 2, text: &#39;H2&#39;, raw: &#39;## H2\\n\\n&#39;, id: &#39;h2&#39; },\n    { depth: 3, text: &#39;H3&#39;, raw: &#39;### H3\\n\\n&#39;, id: &#39;h3&#39; },\n  ],\n  render: [Function: render],\n  raw: [Function: raw],\n  slugKey: &#39;marked-test&#39;\n}\n</code></pre>\n<h3 id=\"classifiedsetid\" class=\"heading-item\">classifiedSet(id)</h3><p>依據 site.config.js 中配置的 分類器 id 取得對應的資料。 </p>\n<pre><code class=\"language-js\">const pageSet = await classifiedSet(&quot;post&quot;);\n\n// 回傳結果\n{\n  pages: [\n    {\n      frontMatter: [Object],\n      sourcePath: &#39;docs/_posts/2022-05-18-marked-test.md&#39;,\n      indexPath: &#39;docs/_posts/2022-05-18-marked-test&#39;,\n      headings: [Array],\n      render: [Function: render],\n      raw: [Function: raw],\n      slugKey: &#39;marked-test&#39;\n    }\n  ]\n}\n</code></pre>\n<h3 id=\"oncontentupdatecallback\" class=\"heading-item\">onContentUpdate(callback)</h3><pre><code class=\"language-js\">  // src/routes/__layout.svelte\n  import { invalidate } from &#39;$app/navigation&#39;;\n  import { page } from &#39;$app/stores&#39;;\n  import { onContentUpdate } from &#39;markedpage&#39;;\n\n  onContentUpdate((payload: Record&lt;string, any&gt;) =&gt; {\n      let slug = $page.params.slug;\n      // update endpoint data.\n      invalidate(`/api/posts.json`);\n      invalidate(`/api/posts/${slug}.json`);\n  });\n</code></pre>\n<p>用於實作 HMR 更新：</p>\n<ul>\n<li>透過 <code>onContentUpdate</code> 監聽 markdown 檔案是否有變動。</li>\n<li>使用 <code>invalidate</code> 通知 SvelteKit 刷新 Endpoint 並自動更新 Client 端。</li>\n</ul>\n<h2 id=\"classifier\" class=\"heading-item\">Classifier</h2><p>MarkedPage 提供了兩個簡易的分類器及客製化的選項。依據使用的分類器不同會有不同的回傳結果。</p>\n<h3 id=\"directoryclassifier\" class=\"heading-item\">DirectoryClassifier</h3><p>對應 <code>type: &#39;directory&#39;</code> ，以路由為基礎的分類器，會以 /docs 為根目錄依據 params.path 配置的路徑進行分類。</p>\n<pre><code class=\"language-js\">// 範例配置\n{ id: &#39;post&#39;, params: { path: &#39;/_posts/&#39; }, type: &#39;directory&#39; }\n\n// 回傳結果\n{\n  pages: [\n    {\n      frontMatter: [Object],\n      sourcePath: &#39;docs/_posts/2022-05-18-marked-test.md&#39;,\n      indexPath: &#39;docs/_posts/2022-05-18-marked-test&#39;,\n      headings: [Array],\n      render: [Function: render],\n      raw: [Function: raw],\n      slugKey: &#39;marked-test&#39;\n    }\n  ]\n}\n</code></pre>\n<h3 id=\"frontmatterclassifier\" class=\"heading-item\">FrontMatterClassifier</h3><p>對應 <code>type: &#39;frontmatter&#39;</code> ，以 frontmatter 欄位為基礎的分類器，遍歷所有 page 的 frontmatter 並根據註冊的欄位的值進行分類。</p>\n<pre><code class=\"language-js\">// 範例配置\n{ id: &#39;tag&#39;, params: { keys: [&#39;tags&#39;] }, type: &#39;frontmatter&#39; }\n\n// 範例 frontmatter\n---\ntitle: MarkedPage Test Page Second\ntags:\n - test\n - test2\n---\n\n// 回傳結果\n{\n  test: [\n    {\n      frontMatter: [Object],\n      sourcePath: &#39;docs/_posts/2022-05-18-marked-test-second.md&#39;,\n      indexPath: &#39;docs/_posts/2022-05-18-marked-test-second&#39;,\n      headings: [Array],\n      render: [Function: render],\n      raw: [Function: raw],\n      slugKey: &#39;marked-test-second&#39;\n    },\n  ],\n  test2: [\n    {\n      frontMatter: [Object],\n      sourcePath: &#39;docs/_posts/2022-05-18-marked-test-second.md&#39;,\n      indexPath: &#39;docs/_posts/2022-05-18-marked-test-second&#39;,\n      headings: [Array],\n      render: [Function: render],\n      raw: [Function: raw],\n      slugKey: &#39;marked-test-second&#39;\n    }\n  ]\n}\n</code></pre>\n<h3 id=\"customclassifier\" class=\"heading-item\">CustomClassifier</h3><p>若前兩者都不符合需求，則可以選擇自定義分類器 Function。</p>\n<pre><code class=\"language-js\">// 自定義 Classifier\nexport const CustomClassifierHandle = async ({options, pages}) =&gt; {\n    let _classifiedPages = [];\n    let { id, params } = options;\n  \n    console.log(`::: Run CustomClassifierHandle -  ${id} :::`);\n    pages.map((page) =&gt; {\n      const { sourcePath } = page;\n      if (!sourcePath.includes(params.path)) return;\n  \n      _classifiedPages.push(page);\n    });\n  \n    return { pages: _classifiedPages };\n};\n\n// 範例配置\n{ id: &#39;custom&#39;, params: { path: &#39;/_posts/&#39; }, type: CustomClassifierHandle },\n\n// 回傳結果 (範例中與 DirectoryClassifier 一致)\n</code></pre>\n<p>接收的兩個參數：</p>\n<ul>\n<li>options -&gt; site.config.js 中配置的 分類器 Object</li>\n<li>pages   -&gt; 位於 /docs 下所有的  page Array</li>\n</ul>\n<h2 id=\"額外功能\" class=\"heading-item\">額外功能</h2><p>除了基本的 Markdown 支援外，另有實作以下幾項內部功能。</p>\n<h3 id=\"frontmatter\" class=\"heading-item\">FrontMatter</h3><p>透過 front-matter 套件，解析在 .md 檔案中頂部的 yaml 區域，並導出至 frontMatter 欄位。</p>\n<pre><code class=\"language-md\">---\ntitle: MarkedPage Test Page\ntags:\n - test\ncategory:\n - default\n---\n\n由 --- 夾著的內容為 yaml 格式。會被導出為 page.frontMatter\n</code></pre>\n<h3 id=\"excerpt\" class=\"heading-item\">Excerpt</h3><p>透過 Regex 解析內容，會將<strong>第一個</strong>搜索到的 <code>&lt;!-- more --&gt;</code> (有無空白皆可) 以上的內容抽出為 excerpt。</p>\n<pre><code class=\"language-md\">---\ntitle: MarkedPage test.\n---\n\n這段句子會被導出為 page.frontMatter.excerpt(不含 HTML 及Markdown tag)。\n&lt;!--more--&gt;\n這段句子不會發生任何事情。\n&lt;!-- more --&gt;\n</code></pre>\n<h3 id=\"draft\" class=\"heading-item\">Draft</h3><p>此為 FrontMatter 的延伸功能，當 FrontMatter 內容包含 <code>_draft: true</code> 時，該篇文章在 <code>NODE_ENV=&quot;production&quot;</code> 狀態（也就是使用 svelte-kit build ) 下不會被列入有效檔案中。</p>\n<pre><code class=\"language-md\">---\ntitle: MarkedPage test.\n_draft: true\n---\n\n這篇文章在 Production 模式下不會被列入有效文章中，無法檢索。\n</code></pre>\n<h2 id=\"擴展功能\" class=\"heading-item\">擴展功能</h2><p>最後，考量到自定義的需求，在 site.config.js 中提供了兩個擴展選項：</p>\n<h3 id=\"marked\" class=\"heading-item\">Marked</h3><p>用以自定義解析 markdown 內容時的處理。像是幫自定義 heading 的id、幫標籤加上統一的 class、自定義 Block ...等。</p>\n<pre><code class=\"language-js\">marked: {\n  options: {},\n  extensions: []\n},\n</code></pre>\n<ul>\n<li>options 類型為 Object 其內容會被傳入 marked.setOptions() 作為預設值<ul>\n<li>配置可參考： <a href=\"https://marked.js.org/using_advanced#options\" target=\"_blank\" rel=\"noreferrer noopenner\">Marked Document - Options</a></li>\n</ul>\n</li>\n<li>extension  類型為 Array 其內容會依序被傳入 marked.use()<ul>\n<li>用以兼容 Marked 的 extension 套件，如： <a href=\"https://www.npmjs.com/package/marked-custom-heading-id\" target=\"_blank\" rel=\"noreferrer noopenner\">marked-custom-heading-id</a></li>\n<li>也可自定義擴展，編寫方式可參考： <a href=\"https://marked.js.org/using_pro#use\" target=\"_blank\" rel=\"noreferrer noopenner\">Marked Document - Use</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"extendpagedatapage\" class=\"heading-item\">extendPageData(page)</h3><p>當 Markdown page 做完基本處理（抽出 heading、導出 excerpt 及 frontmatter）後執行，用以自定義擴展欄位。</p>\n<pre><code class=\"language-js\">import { marked } from &quot;marked&quot;;\nexport const extendPageData = async (page) =&gt; {\n    const raw = await page.raw();\n    page.test = marked.parse(raw);\n}\n</code></pre>\n<h2 id=\"應用範例\" class=\"heading-item\">應用範例</h2><p>最後，附上應用範例。範例中包含 Endpoint 端及 Page 端的實作。</p>\n<blockquote>\n<p><strong>MarkedPage Example Repo</strong><br/> \n網址: <a href=\"https://github.com/saweima12/markedpage-example\" target=\"_blank\" rel=\"noreferrer noopenner\">點我進入</a></p>\n</blockquote>\n<h2 id=\"tldr\" class=\"heading-item\">TL;DR</h2><ul>\n<li>MarkedPage 是為了輔助 SvelteKit Static Site 而製作的工具。</li>\n<li>目的在簡化 Markdown 資料的讀取及建立索引的繁雜過程。</li>\n<li>site.config.js 除了配置以外還能用來填入網站的基本參數作後續使用。</li>\n<li>classifer 可選擇基於<code>資料夾路徑</code>與<code>frontmatter</code>兩種簡易分類器。</li>\n<li>由於使用 marked 作為轉譯器，可使用 extension 功能修改 parse 結果 (可參考 <a href=\"https://marked.js.org/using_pro\" target=\"_blank\" rel=\"noreferrer noopenner\">Document</a>)</li>\n</ul>\n","headings":[{"depth":2,"text":"這能夠做些什麼？","id":"這能夠做些什麼？"},{"depth":2,"text":"事前準備","id":"事前準備"},{"depth":3,"text":"安裝","id":"安裝"},{"depth":3,"text":"目錄結構","id":"目錄結構"},{"depth":3,"text":"配置 site.config.js","id":"配置-siteconfigjs"},{"depth":3,"text":"配置 vite.config.js","id":"配置-viteconfigjs"},{"depth":2,"text":"如何使用？","id":"如何使用？"},{"depth":3,"text":"siteConfig()","id":"siteconfig"},{"depth":3,"text":"getPage(slug)","id":"getpageslug"},{"depth":3,"text":"classifiedSet(id)","id":"classifiedsetid"},{"depth":3,"text":"onContentUpdate(callback)","id":"oncontentupdatecallback"},{"depth":2,"text":"Classifier","id":"classifier"},{"depth":3,"text":"DirectoryClassifier","id":"directoryclassifier"},{"depth":3,"text":"FrontMatterClassifier","id":"frontmatterclassifier"},{"depth":3,"text":"CustomClassifier","id":"customclassifier"},{"depth":2,"text":"額外功能","id":"額外功能"},{"depth":3,"text":"FrontMatter","id":"frontmatter"},{"depth":3,"text":"Excerpt","id":"excerpt"},{"depth":3,"text":"Draft","id":"draft"},{"depth":2,"text":"擴展功能","id":"擴展功能"},{"depth":3,"text":"Marked","id":"marked"},{"depth":3,"text":"extendPageData(page)","id":"extendpagedatapage"},{"depth":2,"text":"應用範例","id":"應用範例"},{"depth":2,"text":"TL;DR","id":"tldr"}]}